#!/usr/bin/env python3

import argparse
import sys
import os
import shutil
from subprocess import call
import git
import se.formatting

def replace_in_file(filename, search, replace):
	with open(filename, "r+", encoding="utf-8") as file:
		data = file.read()
		file.seek(0)

		if isinstance(search, list):
			for index, val in enumerate(search):
				data = data.replace(val, replace[index])
			file.write(data)
		else:
			file.write(data.replace(search, replace))

		file.truncate()

def main():
	parser = argparse.ArgumentParser(description="Create a skeleton of a new Standard Ebook in the current directory.")
	parser.add_argument("-a", "--author", dest="author", required=True, help="the author of the ebook")
	parser.add_argument("-t", "--title", dest="title", required=True, help="the title of the ebook")
	parser.add_argument("-i", "--illustrator", dest="illustrator", help="the illustrator of the ebook")
	parser.add_argument("-r", "--translator", dest="translator", help="the translator of the ebook")
	parser.add_argument("-s", "--se", dest="init_se_repo", action="store_true", help="initialize a new repository on the Standard Ebook server")
	parser.add_argument("-g", "--github", dest="init_github_repo", action="store_true", help="initialize a new repository on GitHub; can only be used when --se is specified")
	parser.add_argument("-e", "--email", dest="email", help="use this email address as the main committer for the new Git repository")
	args = parser.parse_args()

	if args.init_github_repo and not args.init_se_repo:
		print("Error: --github option specified, but --se option not specified.", file=sys.stderr)
		exit(1)

	#Put together some variables for later use
	templates_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "templates")
	identifier = se.formatting.make_url_safe(args.author) + "/" + se.formatting.make_url_safe(args.title)
	title_string = args.title + ", by " + args.author

	if args.translator:
		identifier = identifier + "/" + se.formatting.make_url_safe(args.translator)
		title_string = title_string + ". Translated by " + args.translator

	if args.illustrator:
		identifier = identifier + "/" + se.formatting.make_url_safe(args.illustrator)
		title_string = title_string + ". Illustrated by " + args.illust

	repo_name = identifier.replace("/", "_")

	if os.path.isdir(repo_name):
		print("Error: ./{}/ already exists.".format(repo_name), file=sys.stderr)
		exit(1)

	#Create necessary directories
	os.makedirs(os.path.normpath(repo_name + "/images"))
	os.makedirs(os.path.normpath(repo_name + "/src/epub/css"))
	os.makedirs(os.path.normpath(repo_name + "/src/epub/images"))
	os.makedirs(os.path.normpath(repo_name + "/src/epub/text"))
	os.makedirs(os.path.normpath(repo_name + "/src/META-INF"))

	#Copy over templates
	shutil.copy(os.path.normpath(templates_path + "/LICENSE.md"), os.path.normpath(repo_name + "/"))
	shutil.copy(os.path.normpath(templates_path + "/META-INF/container.xml"), os.path.normpath(repo_name + "/src/META-INF/"))
	shutil.copy(os.path.normpath(templates_path + "/mimetype"), os.path.normpath(repo_name + "/src/"))
	shutil.copy(os.path.normpath(templates_path + "/content.opf"), os.path.normpath(repo_name + "/src/epub/"))
	shutil.copy(os.path.normpath(templates_path + "/onix.xml"), os.path.normpath(repo_name + "/src/epub/"))
	shutil.copy(os.path.normpath(templates_path + "/toc.xhtml"), os.path.normpath(repo_name + "/src/epub/"))
	shutil.copy(os.path.normpath(templates_path + "/core.css"), os.path.normpath(repo_name + "/src/epub/css/"))
	shutil.copy(os.path.normpath(templates_path + "/local.css"), os.path.normpath(repo_name + "/src/epub/css/"))
	shutil.copy(os.path.normpath(templates_path + "/logo.svg"), os.path.normpath(repo_name + "/src/epub/images/"))
	shutil.copy(os.path.normpath(templates_path + "/colophon.xhtml"), os.path.normpath(repo_name + "/src/epub/text/"))
	shutil.copy(os.path.normpath(templates_path + "/imprint.xhtml"), os.path.normpath(repo_name + "/src/epub/text/"))
	shutil.copy(os.path.normpath(templates_path + "/titlepage.xhtml"), os.path.normpath(repo_name + "/src/epub/text/"))
	shutil.copy(os.path.normpath(templates_path + "/uncopyright.xhtml"), os.path.normpath(repo_name + "/src/epub/text/"))
	shutil.copy(os.path.normpath(templates_path + "/titlepage.svg"), os.path.normpath(repo_name + "/images/"))

	if len(args.title) < 15:
		shutil.copy(os.path.normpath(templates_path + "/cover-short.svg"), os.path.normpath(repo_name + "/images/cover.svg"))
	elif len(args.title) >= 30:
		shutil.copy(os.path.normpath(templates_path + "/cover-long.svg"), os.path.normpath(repo_name + "/images/cover.svg"))
	else:
		shutil.copy(os.path.normpath(templates_path + "/cover.svg"), os.path.normpath(repo_name + "/images/cover.svg"))

	#Pre-fill a few templates
	replace_in_file(os.path.normpath(repo_name + "/src/epub/text/titlepage.xhtml"), "TITLESTRING", title_string)
	replace_in_file(os.path.normpath(repo_name + "/images/titlepage.svg"), "TITLESTRING", title_string)
	replace_in_file(os.path.normpath(repo_name + "/images/cover.svg"), "TITLESTRING", title_string)
	replace_in_file(os.path.normpath(repo_name + "/src/epub/content.opf"), ["SEIDENTIFIER", "AUTHOR", "TITLE", "VCSIDENTIFIER"], [identifier, args.author, args.title, repo_name])
	replace_in_file(os.path.normpath(repo_name + "/src/epub/text/colophon.xhtml"), ["SEIDENTIFIER", "AUTHOR", "TITLE"], [identifier, args.author, args.title])

	#Set up local git repo
	repo = git.Repo.init(repo_name)

	if args.email:
		with repo.config_writer() as config:
			config.set_value("user", "email", args.email)

	#Set up remote git repos
	if args.init_se_repo:
		git_command = git.cmd.Git(repo_name)
		git_command.remote("add", "origin", "standardebooks.org:/standardebooks.org/ebooks/{}.git".format(repo_name))

		#Set git to automatically push to SE
		git_command.config("branch.master.remote", "origin")
		git_command.config("branch.master.merge", "refs/heads/master")

		github_option = ""
		if args.init_github_repo:
			github_option = "--github"

		return_code = call(["ssh", "standardebooks.org", "/standardebooks.org/scripts/init-se-repo --repo-name={} --title-string=\"{}\" {}".format(repo_name, title_string, github_option)])
		if return_code != 0:
			print("Error: failed to create repository on Standard Ebooks server: ssh returned code {}.".format(return_code), file=sys.stderr)
			exit(1)

if __name__ == "__main__":
	main()
